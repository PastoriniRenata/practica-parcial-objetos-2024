import superpoderoses.*
import equipo.*
import peligro.*
describe "Superpoderoses" {
	
	/* ACLARACIÓN 
	 * El test asume todos los objetos como instancias de clases. 
	 * Si el diseño de la solución utiliza objetos bien conocidos en algunos casos entonces 
	 * se debe remover la declaración de la variable y la línea en que se sugiere la instanciación.
	 */

	
		// Punto 1
		// Poderes
		const altaVelocidad = new Velocidad(rapidez = 2)// TODO: constrir/obtener un poder de velocidad con rapidez = 2
		const superVelocidad = new Velocidad(rapidez = 3)// TODO: constrir/obtener un poder de velocidad con rapidez = 3
		const vueloRasante = new Vuelo(alturaMaxima = 10, energiaParaDespegar = 10)// TODO: constrir/obtener un poder de vuelo con altura maxima = 10 y energia para despegue = 10
		const vueloAlto = new Vuelo(alturaMaxima = 300, energiaParaDespegar = 200)// TODO: constrir/obtener un poder de vuelo con altura maxima = 300 y energia para despegue = 200
		const vueloRasanteAmplificado = new PoderAplificador(poderBase = vueloRasante, amplificador = 4)// TODO: constrir/obtener un poder amplificador con poder base = vueloRasante y amplificador = 4
		const superVelocidadAmplificada = new PoderAplificador(poderBase = superVelocidad, amplificador = 3) // TODO: constrir/obtener un poder amplificador con poder base = superVelocidad y amplificador = 3
	
		// Personajes 
		const capitanaPatriaGrande =  new Personaje(estrategia = 3, espiritualidad = 5,  poderes = #{superVelocidadAmplificada, vueloAlto})// TODO: constrir/obtener un personaje con estrategia = 3, espiritualidad = 5 y poderes = superVelocidadAmplificada y vueloAlto
		const plusvaliaCero = new Personaje(estrategia = 2, espiritualidad = 4,  poderes = #{altaVelocidad, vueloRasanteAmplificado}) // TODO: constrir/obtener un personaje con estrategia = 2, espiritualidad = 4 y poderes = altaVelocidad y vueloRasanteAmplificado
		const usinaDeDerechos = new Personaje(estrategia = 1, espiritualidad = 6,  poderes = #{vueloRasante}) // TODO: constrir/obtener un personaje con estrategia = 1, espiritualidad = 6 y poderes = vueloRasante
		//usinaDeDerechos capacidad de batalla = 14
		// Punto 2
		// Equipo 
		const cooperativaJusticiera =  new Equipo(equipo = #{capitanaPatriaGrande, plusvaliaCero, usinaDeDerechos})// TODO: constrir/obtener un conformado por capitanaPatriaGrande, plusvaliaCero y usinaDeDerechos
		
		// Punto 3 
		// Peligros
		// const peligroSencillo = new Peligro(capacidadDeBatalla = 30)// TODO: constrir/obtener un peligro con capacidad de batalla = 30 y NO tiene desechos radiactivos  
		// const peligroSencilloRadiactivo = new Peligro(capacidadDeBatalla = 30, desechosRadiactivos = true)// TODO: constrir/obtener un peligro con capacidad de batalla = 30 y tiene desechos radiactivos
		// const peligroModerado = new Peligro(capacidadDeBatalla = 50)// TODO: constrir/obtener un peligro con capacidad de batalla = 50 y NO tiene desechos radiactivos
		// const peligroAlto =  new Peligro(capacidadDeBatalla = 400, desechosRadiactivos = true)// TODO: constrir/obtener un peligro con capacidad de batalla = 400 y tiene desechos radiactivos

        // Punto 4
        const peligroSencillo = new Peligro(capacidadDeBatalla = 30, nivelComplejidad = 1, cantPersQueSeBanca = 2)// TODO: agregar al peligroSencillo nivel de complejidad = 1 y cantidad de personajes que se banca en simultaneo = 2
        const peligroSencilloRadiactivo = new Peligro(capacidadDeBatalla = 30, desechosRadiactivos = true, nivelComplejidad = 1, cantPersQueSeBanca = 2)// TODO: agregar al peligroSencilloRadiactivo nivel de complejidad = 1 y cantidad de personajes que se banca en simultaneo = 2
        const peligroModerado = new Peligro(capacidadDeBatalla = 50, nivelComplejidad = 2, cantPersQueSeBanca = 1)// TODO: agregar al peligroModerado nivel de complejidad = 2 y cantidad de personajes que se banca en simultaneo = 1
        const peligroAlto =  new Peligro(capacidadDeBatalla = 400, desechosRadiactivos = true, nivelComplejidad = 3, cantPersQueSeBanca = 2)// TODO: agregar al peligroAlto nivel de complejidad = 3 y cantidad de personajes que se banca en simultaneo = 2
        

		// // Punto 5 
		const fragmentadorMonopolios = new Metahumano(estrategia = 1,espiritualidad = 6, poderes = #{vueloRasante})// TODO: constrir/obtener un Metahumano con estrategia = 1, espiritualidad = 6 y poderes = vueloRasante
		const educadorPublico =new Mago( poderAcumulado = 12, estrategia = 1,espiritualidad = 6, poderes = #{vueloRasante}) // TODO: constrir/obtener un Mago con poder acumulado = 12, estrategia = 1, espiritualidad = 6 y poderes = vueloRasante	
	
	
	
	/* ACLARACIÓN
	 * Los tests están comentados para evitar errores y warnings, así poder ir incorporándolos 
	 * a medida que se avanza con la solución del ejercicio
	 */
	

	test "punto 1.1 capacidad de batalla que aporta un poder" {
		assert.equals(576, superVelocidadAmplificada.capacidadDeBatalla(capitanaPatriaGrande))// TODO: Verificar que la capacidad de batalla que le aporta superVelocidadAmplificada a capitanaPatriaGrande es 576
		assert.equals(876, vueloAlto.capacidadDeBatalla(capitanaPatriaGrande))// TODO: Verificar que la capacidad de batalla que le aporta vueloAlto a capitanaPatriaGrande es 876
		assert.equals(72, altaVelocidad.capacidadDeBatalla(plusvaliaCero) )// TODO: Verificar que la capacidad de batalla que le aporta altaVelocidad a plusvaliaCero es 72
		assert.equals(144, vueloRasanteAmplificado.capacidadDeBatalla(plusvaliaCero) )// TODO: Verificar que la capacidad de batalla que le aporta vueloRasanteAmplificado a plusvaliaCero es 144
		assert.equals(49, vueloRasante.capacidadDeBatalla(usinaDeDerechos) )// TODO: Verificar que la capacidad de batalla que le aporta vueloRasante a usinaDeDerechos es 49
	}

	test "punto 1.2 capacidad de batalla de un personaje" {
		assert.equals(1452, capitanaPatriaGrande.capacidadDeBatalla())// TODO: Verificar que la capacidad de batalla de capitanaPatriaGrande es 1452
		assert.equals(216, plusvaliaCero.capacidadDeBatalla())// TODO: Verificar que la capacidad de batalla de plusvaliaCero es 216
		assert.equals(49, usinaDeDerechos.capacidadDeBatalla())// TODO: Verificar que la capacidad de batalla de usinaDeDerechos es 49
	}
 	
	test "punto 2.1 Saber el miembro vulnerable de un equipo" {
		assert.equals(usinaDeDerechos, cooperativaJusticiera.miembroMasBulnerable())// TODO: Verificar que miembro mas vulnerable de cooperativaJusticiera es usinaDeDerechos
	}

	test "punto 2.2 Saber la calidad de un equipo" {
		assert.equals(572.33333, cooperativaJusticiera.calidadDelEquipo())// TODO: Verificar que la calidad de cooperativaJusticiera es 572.33333
	}

	test "punto 2.3 Saber los mejores poderes de un equipo" {
		assert.equals(#{vueloAlto, vueloRasanteAmplificado, vueloRasante}, cooperativaJusticiera.mejoresPoderes())// TODO: Verificar que los mejores poderes de cooperativaJusticiera son vueloAlto, vueloRasanteAmplificado y vueloRasante
	}
 	
	

	test "punto 3.1 personajes contra el peligro" {
		assert.that(capitanaPatriaGrande.puedeAfrontarlo(peligroSencillo))// TODO: Verificar que peligroSencillo puede ser afrontado por capitanaPatriaGrande
		assert.that(plusvaliaCero.puedeAfrontarlo(peligroSencillo))// TODO: Verificar que peligroSencillo puede ser afrontado por plusvaliaCero
		assert.that(usinaDeDerechos.puedeAfrontarlo(peligroSencillo))// TODO: Verificar que peligroSencillo puede ser afrontado por usinaDeDerechos
		

		assert.that(capitanaPatriaGrande.puedeAfrontarlo(peligroSencilloRadiactivo))// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por capitanaPatriaGrande
		assert.that(plusvaliaCero.puedeAfrontarlo(peligroSencilloRadiactivo))// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por plusvaliaCero
		assert.notThat(usinaDeDerechos.puedeAfrontarlo(peligroSencilloRadiactivo))// TODO: Verificar que peligroSencilloRadiactivo NO puede ser afrontado por usinaDeDerechos
		

		assert.that(capitanaPatriaGrande.puedeAfrontarlo(peligroModerado))// TODO: Verificar que peligroModerado puede ser afrontado por capitanaPatriaGrande
		assert.that(plusvaliaCero.puedeAfrontarlo(peligroModerado))// TODO: Verificar que peligroModerado puede ser afrontado por plusvaliaCero
		assert.notThat(usinaDeDerechos.puedeAfrontarlo(peligroModerado))// TODO: Verificar que peligroModerado NO puede ser afrontado por usinaDeDerechos
		
	
		assert.that(capitanaPatriaGrande.puedeAfrontarlo(peligroAlto))// TODO: Verificar que peligroAlto puede ser afrontado por capitanaPatriaGrande
		assert.notThat(plusvaliaCero.puedeAfrontarlo(peligroAlto))// TODO: Verificar que peligroAlto NO puede ser afrontado por plusvaliaCero
		assert.notThat(usinaDeDerechos.puedeAfrontarlo(peligroAlto))// TODO: Verificar que peligroAlto NO puede ser afrontado por usinaDeDerechos
		
	}
 
	

	test "punto 3.2 Saber si un peligro es sensato " {
		assert.that(cooperativaJusticiera.puedeAfrontarlo(peligroSencillo))// TODO: Verificar que peligroSencillo es sensato para cooperativaJusticiera
		assert.notThat(cooperativaJusticiera.puedeAfrontarlo(peligroSencilloRadiactivo))// TODO: Verificar que peligroSencilloRadiactivo NO es sensato para cooperativaJusticiera
		assert.notThat(cooperativaJusticiera.puedeAfrontarlo(peligroModerado))// TODO: Verificar que peligroModerado NO es sensato para cooperativaJusticiera
		assert.notThat(cooperativaJusticiera.puedeAfrontarlo(peligroAlto))// TODO: Verificar que peligroAlto NO es sensato para cooperativaJusticiera
	}
 	
	

	test "punto 4.1 Afrontar peligro individualmente: OK" {
		usinaDeDerechos.afrontarPeligro(peligroSencillo)// TODO: Hacer que usinaDeDerechos afronte a peligroSencillo 
		assert.equals(2, usinaDeDerechos.estrategia())// TODO: Verificar que la estrategia de usinaDeDerechos es 2
	}
 


	test "punto 4.1 Afrontar peligro individualmente: no OK por radioactividad" {
		assert.throwsExceptionWithMessage("No puede afrontar el peligro.",{usinaDeDerechos.afrontarPeligro(peligroSencilloRadiactivo)})// TODO: Hacer que usinaDeDerechos afronte a peligroSencilloRadiactivo (NO SE PUEDE!)
		assert.equals(1, usinaDeDerechos.estrategia())// TODO: Verificar que la estrategia de usinaDeDerechos es 1
		
	}
 
	

	test "punto 4.1 Afrontar peligro individualmente: no OK por capacidad de batalla" {
		assert.throwsExceptionWithMessage("No puede afrontar el peligro.",{usinaDeDerechos.afrontarPeligro(peligroModerado)})// TODO: Hacer que usinaDeDerechos afronte a peligroModerado (NO SE PUEDE!)
		assert.equals(1, usinaDeDerechos.estrategia())// TODO: Verificar que la estrategia de usinaDeDerechos es 1
	}
 
	

	test "punto 4.2  Afrontar peligro (moderado) en equipo  " {
		cooperativaJusticiera.afrontarPeligro(peligroModerado)// TODO: Hacer que cooperativaJusticiera afronte a peligroModerado
		assert.equals(5, capitanaPatriaGrande.estrategia())// TODO: Verificar que la estrategia de capitanaPatriaGrande es 5
		assert.equals(4, plusvaliaCero.estrategia())// TODO: Verificar que la estrategia de plusvaliaCero es 4
		assert.equals(1, usinaDeDerechos.estrategia())// TODO: Verificar que la estrategia de usinaDeDerechos es 1		
	}
 


	test "punto 4.2  Afrontar peligro (alto) en equipo (no ok)" {
		
		assert.throwsExceptionWithMessage("No son suficientes para afrontar el peligro",{cooperativaJusticiera.afrontarPeligro(peligroAlto)})// TODO: Hacer que cooperativaJusticiera afronte a peligroAlto (NO SE PUEDE!)
		assert.equals(3, capitanaPatriaGrande.estrategia())// TODO: Verificar que la estrategia de capitanaPatriaGrande es 3
		assert.equals(2, plusvaliaCero.estrategia())// TODO: Verificar que la estrategia de plusvaliaCero es 2
		assert.equals(1, usinaDeDerechos.estrategia())// TODO: Verificar que la estrategia de usinaDeDerechos es 1
	}
 	


	test "punto 5.1  Metahumano " {
		assert.equals(98, fragmentadorMonopolios.capacidadDeBatalla())// TODO: Verificar que la capacidad de batalla de fragmentadorMonopolios es 98
		assert.that(fragmentadorMonopolios.puedeAfrontarlo(peligroSencilloRadiactivo))// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por fragmentadorMonopolios
		fragmentadorMonopolios.afrontarPeligro(peligroSencilloRadiactivo)// TODO: Hacer que fragmentadorMonopolios afronte a peligroSencilloRadiactivo
		assert.equals( 2, fragmentadorMonopolios.estrategia())// TODO: Verificar que la estrategia de fragmentadorMonopolios es 2
		
		assert.equals(7 , fragmentadorMonopolios.espiritualidad())// TODO: Verificar que la espiritualidad de fragmentadorMonopolios es 7
		
		assert.throwsExceptionWithMessage("No puede afrontar el peligro.", {fragmentadorMonopolios.validarpuedeAfrontar(peligroAlto)})// TODO: Verificar que peligroAlto NO puede ser afrontado por fragmentadorMonopolios
		assert.throwsExceptionWithMessage("No puede afrontar el peligro.", {fragmentadorMonopolios.afrontarPeligro(peligroAlto)})		// TODO: Hacer que fragmentadorMonopolios afronte a peligroAlto (NO SE PUEDE!)
	}
 


	test "punto 5.2  Mago " {
		assert.equals(110, educadorPublico.capacidadDeBatalla())// TODO: Verificar que la capacidad de batalla de educadorPublico es 110
		
		assert.throwsExceptionWithMessage("No puede afrontar el peligro.", {educadorPublico.validarpuedeAfrontar(peligroAlto)})// TODO: Verificar que peligroAlto NO puede ser afrontado por educadorPublico
		
		assert.throwsExceptionWithMessage("No puede afrontar el peligro.", {educadorPublico.afrontarPeligro(peligroAlto)})// TODO: Hacer que educadorPublico afronte a peligroAlto (NO SE PUEDE!)

		assert.that(peligroSencilloRadiactivo.puedeAfrontarlo(educadorPublico))// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por educadorPublico
		
		educadorPublico.afrontarPeligro(peligroSencilloRadiactivo)// TODO: Hacer que educadorPublico afronte a peligroSencilloRadiactivo
		assert.equals(2,educadorPublico.estrategia())// TODO: Verificar que la estrategia de educadorPublico es 2
		
		assert.equals(7,educadorPublico.poderAcumulado())// TODO: Verificar que el poder acumulado de educadorPublico es 7
		
		educadorPublico.afrontarPeligro(peligroSencilloRadiactivo)// TODO: Hacer que educadorPublico afronte a peligroSencilloRadiactivo
		
		assert.equals(2,educadorPublico.estrategia())// TODO: Verificar que la espiritualidad de educadorPublico es 2
		assert.equals(2,educadorPublico.poderAcumulado())// TODO: Verificar que el poder acumulado de educadorPublico es 2
	}
 
}
